angular.module("storage",[]).factory("storage",["$parse","$window","$log",function(e,r,n){"use strict";var a="undefined"==typeof r.localStorage?void 0:r.localStorage,t={resolveValue:function(e,r){r=angular.toJson(angular.isDate(r)?"love-date-json"+r.toJSON():"[object RegExp]"===Object.prototype.toString.call(r)?"love-regexp-string"+r.toString():r),a.setItem(e,r)},parseValue:function(e){var r;try{r=angular.fromJson(e),"undefined"==typeof r&&(r="undefined"),"true"===r&&(r=!0),"false"===r&&(r=!1),-1!==r.indexOf("love-date-json")&&(r=r.replace("love-date-json",""),r=new Date(r)),-1!==r.indexOf("love-regexp-string")&&(r=r.split("/"),r=new RegExp(r[1],r[2]))}catch(a){n.info(a.message)}return r},inArray:function(e,r){if(angular.isArray(r)){var n=!1;return angular.forEach(r,function(r){angular.equals(e,r)&&(n=!0)}),n}},unique:function(e){if(angular.isArray(e)){var r={},n=[];return angular.forEach(e,function(e){r.hasOwnProperty(e)||(n.push(e),r[e]=1)}),n}}},u={set:function(e,r){a.getItem(e)&&a.removeItem(e);try{t.resolveValue(e,r)}catch(u){n.info(u.message)}},get:function(e){return t.parseValue(a.getItem(e))},remove:function(e){a.removeItem(e)},clear:function(){a.clear()},update:function(e,r,n){function a(e,r){var n=u.get(e);return angular.isNumber(n)?(n+=r,void u.set(e,n)):!1}function i(e){var r=u.get(e);if(angular.equals(r,!0))r=!1,u.set(e,r);else{if(!angular.equals(r,!1))return!1;r=!0,u.set(e,r)}}function o(e,r){var n=u.get(e);return angular.isArray(n)?(n=n.concat(r),void u.set(e,n)):!1}function s(e,r){var n=u.get(e);return!angular.isArray(n)||angular.isArray(r)?!1:(t.inArray(r,n)||n.push(r),void u.set(e,n))}function c(e,r){var n=u.get(e);if(!angular.isArray(n))return!1;for(;-1!==n.indexOf(r);){var a=n.indexOf(r);n.splice(a,1)}u.set(e,n)}function f(e){var r=u.get(e);return angular.isArray(r)?void u.set(e,t.unique(r)):!1}function l(e,r){var n=u.get(e);angular.isObject(n)&&angular.isObject(r)&&(angular.extend(n,r),u.set(e,n))}switch(e){case"$inc":a(r,n);break;case"$verse":i(r,n);break;case"$push":o(r,n);break;case"$addToSet":s(r,n);break;case"$pull":c(r,n);break;case"$unique":f(r);break;case"$extend":l(r,n)}},bindObjectReverse:{},bindObjectForward:{},bind:function(r,n,a,t){function i(){var t=r.$watch(function(){return u.get(a)},function(a){e(n).assign(r,a)},!0);e(a).assign(u.bindObjectReverse,t)}function o(){var t=r.$watch(function(){return e(n)(r)},function(e){u.set(a,e)},!0);e(n).assign(u.bindObjectForward,t)}switch(t){case"forward":o();break;case"reverse":i();break;default:o()}},unbind:function(r,n,a,t){function i(){e(a)(u.bindObjectReverse).apply()}function o(){e(n)(u.bindObjectForward).apply()}switch(t){case"forward":o();break;case"reverse":i();break;default:o()}}};return u}]);
//# sourceMappingURL=data:application/json;base64,